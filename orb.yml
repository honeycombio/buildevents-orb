version: 2.1

description: |
  Install and use the Honeycomb buildevents tool for generating traces of your builds

  Please see the Buildevents Orb Readme (https://github.com/honeycombio/buildevents-orb)
  for use instructions

commands:
  start_trace:
    steps:
      ### set up buildevents
      - run:
          name: setup honeycomb buildevents and start trace
          command: |
            # set up our working environment and timestamp the trace
            mkdir -p /tmp/be/bin-linux /tmp/be/bin-darwin
            date +%s > /tmp/be/build_start

            # get all buildevenst binaries so jobs in any OS will work
            curl -q -L -o /tmp/be/bin-linux/buildevents https://github.com/honeycombio/buildevents/releases/latest/download/buildevents
            curl -q -L -o /tmp/be/bin-darwin/buildevents https://github.com/honeycombio/buildevents/releases/latest/download/buildevents-darwin

            # make them executable
            chmod 755 /tmp/be/bin-linux/buildevents
            chmod 755 /tmp/be/bin-darwin/buildevents
      - persist_to_workspace:
          root: /tmp
          paths:
            - be/build_start
            - be/bin-linux/buildevents
            - be/bin-darwin/buildevents
      - run:
          name: report_step
          command: |
            # choose the right buildevents binary
            if uname -a | grep Linux | grep x86_64 > /dev/null 2>&1 ; then
              export PATH=$PATH:/tmp/be/bin-linux
            elif uname -a | grep Darwin > /dev/null 2>&1; then
              export PATH=$PATH:/tmp/be/bin-darwin
            fi
            # use that binary to report this step
            buildevents step $CIRCLE_WORKFLOW_ID setup $(cat /tmp/be/build_start) start_trace

  finish_trace:
    parameters:
      result:
        type: string
    steps:
      - attach_workspace:
          at: /tmp/buildevents
      - run:
          name: finish build trace
          command: |
            # choose the right buildevents binary
            if uname -a | grep Linux | grep x86_64 > /dev/null 2>&1 ; then
              export PATH=$PATH:/tmp/buildevents/be/bin-linux:/tmp/be/bin-linux
            elif uname -a | grep Darwin > /dev/null 2>&1; then
              export PATH=$PATH:/tmp/buildevents/be/bin-darwin:/tmp/be/bin-darwin
            fi
            # use that binary to report this step
            buildevents build $CIRCLE_WORKFLOW_ID $(cat /tmp/buildevents/be/build_start) << parameters.result >>

  with_job_span:
    ## TODO don't use $BASH_ENV at all; prefer the workspace for all temporary data
    parameters:
      steps:
        type: steps
    steps:
      - attach_workspace:
          at: /tmp/buildevents
      - run:
          name: starting span for job
          command: |
            mkdir -p /tmp/buildevents/be/${CIRCLE_JOB}
            date +%s > /tmp/buildevents/be/${CIRCLE_JOB}/start
            BUILDEVENTS_SPAN_ID=$(echo $CIRCLE_JOB | sha256sum | awk '{print $1}')
            echo $BUILDEVENTS_SPAN_ID > /tmp/buildevents/be/${CIRCLE_JOB}/span_id

            # in case this is a bash env, be kind and export the buildevents path and span ID
            # this orb won't rely on them but consumers of the orb might find it useful
            # this way steps that are run within a span can use the raw buildevents if desired
            echo "export BUILDEVENTS_SPAN_ID=$BUILDEVENTS_SPAN_ID" >> $BASH_ENV
            if uname -a | grep Linux | grep x86_64 > /dev/null 2>&1 ; then
              echo "export PATH=$PATH:/tmp/buildevents/be/bin-linux:/tmp/be/bin-linux" >> $BASH_ENV
            elif uname -a | grep Darwin > /dev/null 2>&1; then
              echo "export PATH=$PATH:/tmp/buildevents/be/bin-darwin:/tmp/be/bin-darwin" >> $BASH_ENV
            fi

      ### run the job's steps
      - steps: << parameters.steps >>

      - run:
          name: finishing span for job
          command: |
            # choose the right buildevents binary
            if uname -a | grep Linux | grep x86_64 > /dev/null 2>&1 ; then
              export PATH=$PATH:/tmp/buildevents/be/bin-linux:/tmp/be/bin-linux
            elif uname -a | grep Darwin > /dev/null 2>&1; then
              export PATH=$PATH:/tmp/buildevents/be/bin-darwin:/tmp/be/bin-darwin
            fi
            buildevents step $CIRCLE_WORKFLOW_ID \
              $(cat /tmp/buildevents/be/${CIRCLE_JOB}/span_id) \
              $(cat /tmp/buildevents/be/${CIRCLE_JOB}/start) \
              $CIRCLE_JOB
          when: always

  berun:
    description: |
      berun executes a command and creates a span representing that command. The
      bename parameter will be the name of the span. berun must be used within a
      step decorated by with_job_span.
    parameters:
      bename:
        type: string
      becommand:
        type: string
    steps:
      - run:
          name: << parameters.bename >>
          command: |
            # choose the right buildevents binary
            if uname -a | grep Linux | grep x86_64 > /dev/null 2>&1 ; then
              export PATH=$PATH:/tmp/buildevents/be/bin-linux:/tmp/be/bin-linux
            elif uname -a | grep Darwin > /dev/null 2>&1; then
              export PATH=$PATH:/tmp/buildevents/be/bin-darwin:/tmp/be/bin-darwin
            fi
            buildevents cmd $CIRCLE_WORKFLOW_ID \
              $(cat /tmp/buildevents/be/${CIRCLE_JOB}/span_id) \
              << parameters.bename >> -- << parameters.becommand >>
